{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faFrown } from '@fortawesome/free-solid-svg-icons';\n// import { Oval } from 'react-loader-spinner';\n// import './App.css';\n\n// function Grp204WeatherApp() {\n//     const [input, setInput] = useState('');\n//     const [weather, setWeather] = useState({\n//         loading: false,\n//         data: null,\n//         forecast: null,\n//         error: false,\n//     });\n\n//     const apiKey = 'f00c38e0279b7bc85480c3fe775d518c';\n\n//     // Formater la date\n//     const formatDate = (timestamp) => {\n//         const date = new Date(timestamp * 1000);\n//         const days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\n//         return `${days[date.getDay()]} ${date.getDate()}`;\n//     };\n\n//     // Recherche météo\n//     const search = async (event) => {\n//         if (event.key === 'Enter') {\n//             event.preventDefault();\n//             if (!input.trim()) return;\n\n//             setWeather({ ...weather, loading: true, error: false });\n\n//             try {\n//                 // Appel API pour les données actuelles\n//                 const currentWeatherResponse = await axios.get(\n//                     'https://api.openweathermap.org/data/2.5/weather',\n//                     {\n//                         params: {\n//                             q: input.trim(),\n//                             units: 'metric',\n//                             appid: apiKey,\n//                         },\n//                     }\n//                 );\n\n//                 // Appel API pour les prévisions sur 5 jours\n//                 const forecastResponse = await axios.get(\n//                     'https://api.openweathermap.org/data/2.5/forecast',\n//                     {\n//                         params: {\n//                             q: input.trim(),\n//                             units: 'metric',\n//                             appid: apiKey,\n//                         },\n//                     }\n//                 );\n\n//                 setWeather({\n//                     loading: false,\n//                     data: currentWeatherResponse.data,\n//                     forecast: forecastResponse.data,\n//                     error: false,\n//                 });\n//             } catch (error) {\n//                 console.error('Erreur API:', error);\n//                 setWeather({ loading: false, data: null, forecast: null, error: true });\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1 className=\"app-name\">Application Météo grp204</h1>\n//             <div className=\"search-bar\">\n//                 <input\n//                     type=\"text\"\n//                     className=\"city-search\"\n//                     placeholder=\"Entrez le nom de la ville...\"\n//                     value={input}\n//                     onChange={(e) => setInput(e.target.value)}\n//                     onKeyPress={search}\n//                 />\n//             </div>\n\n//             {weather.loading && (\n//                 <div className=\"loading\">\n//                     <Oval color=\"blue\" height={50} width={50} />\n//                 </div>\n//             )}\n\n//             {weather.error && (\n//                 <div className=\"error-message\">\n//                     <FontAwesomeIcon icon={faFrown} />\n//                     <span> Ville introuvable. Veuillez réessayer. </span>\n//                 </div>\n//             )}\n\n//             {weather.data && (\n//                 <div className=\"weather-info\">\n//                     <h2>\n//                         {weather.data.name}, {weather.data.sys.country}\n//                     </h2>\n//                     <img\n//                         src={`https://openweathermap.org/img/wn/${weather.data.weather[0].icon}@2x.png`}\n//                         alt={weather.data.weather[0].description}\n//                     />\n//                     <p>{Math.round(weather.data.main.temp)}°C</p>\n//                     <p>{weather.data.weather[0].description}</p>\n//                     <p>Vent : {weather.data.wind.speed} m/s</p>\n//                 </div>\n//             )}\n\n//             {weather.forecast && (\n//                 <div className=\"forecast-container\">\n//                     <h3>Prévisions sur 5 jours :</h3>\n//                     <div className=\"forecast-list\">\n//                         {weather.forecast.list\n//                             .filter((_, index) => index % 8 === 0) // Filtrer pour obtenir 1 prévision par jour\n//                             .map((forecast, index) => (\n//                                 <div className=\"forecast-item\" key={index}>\n//                                     <p>{formatDate(forecast.dt)}</p>\n//                                     <img\n//                                         src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`}\n//                                         alt={forecast.weather[0].description}\n//                                     />\n//                                     <p>{Math.round(forecast.main.temp)}°C</p>\n//                                 </div>\n//                             ))}\n//                     </div>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Grp204WeatherApp;","map":{"version":3,"names":[],"sources":["D:/Ofppt/cours 2 annee/Cours_Approche_Agile/github dossier/gittpReact/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faFrown } from '@fortawesome/free-solid-svg-icons';\r\n// import { Oval } from 'react-loader-spinner';\r\n// import './App.css';\r\n\r\n// function Grp204WeatherApp() {\r\n//     const [input, setInput] = useState('');\r\n//     const [weather, setWeather] = useState({\r\n//         loading: false,\r\n//         data: null,\r\n//         forecast: null,\r\n//         error: false,\r\n//     });\r\n\r\n//     const apiKey = 'f00c38e0279b7bc85480c3fe775d518c';\r\n\r\n//     // Formater la date\r\n//     const formatDate = (timestamp) => {\r\n//         const date = new Date(timestamp * 1000);\r\n//         const days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];\r\n//         return `${days[date.getDay()]} ${date.getDate()}`;\r\n//     };\r\n\r\n//     // Recherche météo\r\n//     const search = async (event) => {\r\n//         if (event.key === 'Enter') {\r\n//             event.preventDefault();\r\n//             if (!input.trim()) return;\r\n\r\n//             setWeather({ ...weather, loading: true, error: false });\r\n\r\n//             try {\r\n//                 // Appel API pour les données actuelles\r\n//                 const currentWeatherResponse = await axios.get(\r\n//                     'https://api.openweathermap.org/data/2.5/weather',\r\n//                     {\r\n//                         params: {\r\n//                             q: input.trim(),\r\n//                             units: 'metric',\r\n//                             appid: apiKey,\r\n//                         },\r\n//                     }\r\n//                 );\r\n\r\n//                 // Appel API pour les prévisions sur 5 jours\r\n//                 const forecastResponse = await axios.get(\r\n//                     'https://api.openweathermap.org/data/2.5/forecast',\r\n//                     {\r\n//                         params: {\r\n//                             q: input.trim(),\r\n//                             units: 'metric',\r\n//                             appid: apiKey,\r\n//                         },\r\n//                     }\r\n//                 );\r\n\r\n//                 setWeather({\r\n//                     loading: false,\r\n//                     data: currentWeatherResponse.data,\r\n//                     forecast: forecastResponse.data,\r\n//                     error: false,\r\n//                 });\r\n//             } catch (error) {\r\n//                 console.error('Erreur API:', error);\r\n//                 setWeather({ loading: false, data: null, forecast: null, error: true });\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <h1 className=\"app-name\">Application Météo grp204</h1>\r\n//             <div className=\"search-bar\">\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     className=\"city-search\"\r\n//                     placeholder=\"Entrez le nom de la ville...\"\r\n//                     value={input}\r\n//                     onChange={(e) => setInput(e.target.value)}\r\n//                     onKeyPress={search}\r\n//                 />\r\n//             </div>\r\n\r\n//             {weather.loading && (\r\n//                 <div className=\"loading\">\r\n//                     <Oval color=\"blue\" height={50} width={50} />\r\n//                 </div>\r\n//             )}\r\n\r\n//             {weather.error && (\r\n//                 <div className=\"error-message\">\r\n//                     <FontAwesomeIcon icon={faFrown} />\r\n//                     <span> Ville introuvable. Veuillez réessayer. </span>\r\n//                 </div>\r\n//             )}\r\n\r\n//             {weather.data && (\r\n//                 <div className=\"weather-info\">\r\n//                     <h2>\r\n//                         {weather.data.name}, {weather.data.sys.country}\r\n//                     </h2>\r\n//                     <img\r\n//                         src={`https://openweathermap.org/img/wn/${weather.data.weather[0].icon}@2x.png`}\r\n//                         alt={weather.data.weather[0].description}\r\n//                     />\r\n//                     <p>{Math.round(weather.data.main.temp)}°C</p>\r\n//                     <p>{weather.data.weather[0].description}</p>\r\n//                     <p>Vent : {weather.data.wind.speed} m/s</p>\r\n//                 </div>\r\n//             )}\r\n\r\n//             {weather.forecast && (\r\n//                 <div className=\"forecast-container\">\r\n//                     <h3>Prévisions sur 5 jours :</h3>\r\n//                     <div className=\"forecast-list\">\r\n//                         {weather.forecast.list\r\n//                             .filter((_, index) => index % 8 === 0) // Filtrer pour obtenir 1 prévision par jour\r\n//                             .map((forecast, index) => (\r\n//                                 <div className=\"forecast-item\" key={index}>\r\n//                                     <p>{formatDate(forecast.dt)}</p>\r\n//                                     <img\r\n//                                         src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`}\r\n//                                         alt={forecast.weather[0].description}\r\n//                                     />\r\n//                                     <p>{Math.round(forecast.main.temp)}°C</p>\r\n//                                 </div>\r\n//                             ))}\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Grp204WeatherApp;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}